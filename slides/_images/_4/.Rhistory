#                                   colour = "white",
#                                   size = 0.5, linetype = "solid"),
#   panel.grid.major = element_line(size = 0.2, linetype = 'solid',
#                                   colour = "grey"),
#   panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
#                                   colour = "grey")
) +
transition_states(state,transition_length=c(12,16,16,16,16,16),state_length=c(50,36,30,30,30,50),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p, height = 800, width =800)
df <- data.frame(xaxisTime=runif(60),Treated=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treated=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treated=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
caliper <- .02
df <- df %>%
mutate(bins = c(rep(filter(df,Treated=="Treated")$xaxisTime-caliper,6),
rep(filter(df,Treated=="Treated")$xaxisTime+caliper,6))) %>%
#There has to be a less clunky way to do this
rowwise() %>%
mutate(matchmeas = min(abs(xaxisTime-filter(df,Treated=="Treated")$xaxisTime))) %>%
mutate(match = matchmeas < caliper) %>%
group_by(Treated,match) %>%
mutate(mean_Y = ifelse(match==1,mean(Y),NA)) %>%
ungroup()
#Check how many matches we have before proceeding; regenerate randomized data
#until we have a decent number
table(filter(df,Treated=="Control")$match)
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(bins=NA,mean_Y=NA,state='1. Start with raw data.'),
#Step 2: Add Y-lines
df %>% mutate(mean_Y=NA,state='2. Look for Controls with similar X values to the Treatments.'),
#Step 3: Drop unmatch obs
df %>% mutate(Y = ifelse(match==1,Y,NA),mean_Y=NA,state="3. Keep Controls only if they're similar enough."),
#Step 4: Take means
df %>% mutate(Y = ifelse(match==1,Y,NA),bins=NA,state="4. Among what's kept, see what the treatment explains."),
#Step 5: Eliminate everything but the means
df %>% mutate(Y = ifelse(match==1,mean_Y,NA),bins=NA,state="5. Ignore everything not explained by treatment."),
#Step 6: Get treatment effect
df %>% mutate(Y = NA,bins=NA,state="6. The treatment effect is the remaining difference."))
p <- ggplot(dffull,aes(y=Y,x=xaxisTime,color=Treated,size=Treated))+geom_point()+
geom_vline(aes(xintercept=bins))+
geom_hline(aes(yintercept=mean_Y,color=Treated))+
geom_segment(aes(x=.5,xend=.5,
y=ifelse(state=="6. The treatment effect is the remaining difference.",
filter(df,Treated=="Treated")$mean_Y[1],NA),
yend=filter(df,Treated=="Control",match==TRUE)$mean_Y[1]),size=1.5,color='#FF7E15')+
scale_size_manual(values=c(2,3))+xlab("X")+
guides(fill=guide_legend(title="Group"))+
labs(title = 'The Effect of Treatment on Y while Matching on X (with a caliper) \n{next_state}') +
theme(
plot.title = element_text(size=26, color = "#484848", vjust = -5),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey")
) +
transition_states(state,transition_length=c(12,16,16,16,16,16),state_length=c(50,36,30,30,30,50),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p, height = 600, width =1000)
tie_colours = list(
tie_colors_d = c("#005e73", "#00C1D4", "#FF7E15", "#7200FE", "#143BFF", "#A8968C", "#FFDE36","#FF4F4F","#5AFFC5",  "#D0D0CE", "#FFAEA2"),
tie_colors_c = c("#005e73", "#00C1D4", "#5AFFC5")
)
tie_palletes = function(n, type = c("discrete", "continuous")) {
type = match.arg(type)
if (type == "discrete") {
palette = tie_colours[["tie_colors_d"]]
} else {
palette = tie_colours[["tie_colors_c"]]
}
if (missing(n)) {
n = length(palette)
}
out = switch(type,
continuous = grDevices::colorRampPalette(palette)(n),
if (n < 12) {
discrete = palette[1:n]
} else {
discrete = grDevices::colorRampPalette(palette)(n)
}
)
structure(out, class = "palette")
}
scale_colour_tie_d = function(name) {
ggplot2::scale_colour_manual(values = tie_palletes(n = 10, type = "discrete"))
}
scale_fill_tie_d = function(name) {
ggplot2::scale_fill_manual(values = tie_palletes(n = 10, type = "discrete"))
}
scale_colour_tie_c = function(name) {
ggplot2::scale_colour_gradientn(colours = tie_palletes(n = 3, type = "continuous"))
}
scale_fill_tie_c = function(name) {
ggplot2::scale_fill_gradientn(colours = tie_palletes(n = 3, type = "continuous"))
}
options(
ggplot2.discrete.colour = function(...) scale_colour_tie_d(),
ggplot2.discrete.fill = function(...) scale_fill_tie_d(),
ggplot2.continuous.colour = function(...) scale_colour_tie_c(),
ggplot2.continuous.fill = function(...) scale_fill_tie_c()
)
df <- data.frame(xaxisTime=runif(60),Treated=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treated=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treated=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
caliper <- .02
df <- df %>%
mutate(bins = c(rep(filter(df,Treated=="Treated")$xaxisTime-caliper,6),
rep(filter(df,Treated=="Treated")$xaxisTime+caliper,6))) %>%
#There has to be a less clunky way to do this
rowwise() %>%
mutate(matchmeas = min(abs(xaxisTime-filter(df,Treated=="Treated")$xaxisTime))) %>%
mutate(match = matchmeas < caliper) %>%
group_by(Treated,match) %>%
mutate(mean_Y = ifelse(match==1,mean(Y),NA)) %>%
ungroup()
#Check how many matches we have before proceeding; regenerate randomized data
#until we have a decent number
table(filter(df,Treated=="Control")$match)
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(bins=NA,mean_Y=NA,state='1. Start with raw data.'),
#Step 2: Add Y-lines
df %>% mutate(mean_Y=NA,state='2. Look for Controls with similar X values to the Treatments.'),
#Step 3: Drop unmatch obs
df %>% mutate(Y = ifelse(match==1,Y,NA),mean_Y=NA,state="3. Keep Controls only if they're similar enough."),
#Step 4: Take means
df %>% mutate(Y = ifelse(match==1,Y,NA),bins=NA,state="4. Among what's kept, see what the treatment explains."),
#Step 5: Eliminate everything but the means
df %>% mutate(Y = ifelse(match==1,mean_Y,NA),bins=NA,state="5. Ignore everything not explained by treatment."),
#Step 6: Get treatment effect
df %>% mutate(Y = NA,bins=NA,state="6. The treatment effect is the remaining difference."))
p <- ggplot(dffull,aes(y=Y,x=xaxisTime,color=Treated,size=Treated))+geom_point()+
geom_vline(aes(xintercept=bins))+
geom_hline(aes(yintercept=mean_Y,color=Treated))+
geom_segment(aes(x=.5,xend=.5,
y=ifelse(state=="6. The treatment effect is the remaining difference.",
filter(df,Treated=="Treated")$mean_Y[1],NA),
yend=filter(df,Treated=="Control",match==TRUE)$mean_Y[1]),size=1.5,color='#FF7E15')+
scale_size_manual(values=c(2,3))+xlab("X")+
guides(fill=guide_legend(title="Group"))+
labs(title = 'The Effect of Treatment on Y while Matching on X (with a caliper) \n{next_state}') +
theme(
plot.title = element_text(size=26, color = "#484848", vjust = -5),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey")
) +
transition_states(state,transition_length=c(12,16,16,16,16,16),state_length=c(50,36,30,30,30,50),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p, height = 600, width =1000)
df <- data.frame(xaxisTime=runif(60),Treated=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treated=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treated=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
caliper <- .02
df <- df %>%
mutate(bins = c(rep(filter(df,Treated=="Treated")$xaxisTime-caliper,6),
rep(filter(df,Treated=="Treated")$xaxisTime+caliper,6))) %>%
#There has to be a less clunky way to do this
rowwise() %>%
mutate(matchmeas = min(abs(xaxisTime-filter(df,Treated=="Treated")$xaxisTime))) %>%
mutate(match = matchmeas < caliper) %>%
group_by(Treated,match) %>%
mutate(mean_Y = ifelse(match==1,mean(Y),NA)) %>%
ungroup()
#Check how many matches we have before proceeding; regenerate randomized data
#until we have a decent number
table(filter(df,Treated=="Control")$match)
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(bins=NA,mean_Y=NA,state='1. Start with raw data.'),
#Step 2: Add Y-lines
df %>% mutate(mean_Y=NA,state='2. Look for Controls with similar X values to the Treatments.'),
#Step 3: Drop unmatch obs
df %>% mutate(Y = ifelse(match==1,Y,NA),mean_Y=NA,state="3. Keep Controls only if they're similar enough."),
#Step 4: Take means
df %>% mutate(Y = ifelse(match==1,Y,NA),bins=NA,state="4. Among what's kept, see what the treatment explains."),
#Step 5: Eliminate everything but the means
df %>% mutate(Y = ifelse(match==1,mean_Y,NA),bins=NA,state="5. Ignore everything not explained by treatment."),
#Step 6: Get treatment effect
df %>% mutate(Y = NA,bins=NA,state="6. The treatment effect is the remaining difference."))
p <- ggplot(dffull,aes(y=Y,x=xaxisTime,color=Treated,size=Treated))+geom_point()+
geom_vline(aes(xintercept=bins), color='#FF7E15')+
geom_hline(aes(yintercept=mean_Y,color=Treated))+
geom_segment(aes(x=.5,xend=.5,
y=ifelse(state=="6. The treatment effect is the remaining difference.",
filter(df,Treated=="Treated")$mean_Y[1],NA),
yend=filter(df,Treated=="Control",match==TRUE)$mean_Y[1]),size=1.5,color='#FF7E15')+
scale_size_manual(values=c(2,3))+xlab("X")+
guides(fill=guide_legend(title="Group"))+
labs(title = 'The Effect of Treatment on Y while Matching on X (with a caliper) \n{next_state}') +
theme(
plot.title = element_text(size=26, color = "#484848", vjust = -5),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey")
) +
transition_states(state,transition_length=c(12,16,16,16,16,16),state_length=c(50,36,30,30,30,50),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p, height = 600, width =1000)
df <- data.frame(xaxisTime=runif(60),Treatment=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treatment=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treated=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
df <- data.frame(xaxisTime=runif(60),Treatment=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treatment=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treated=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
df <- data.frame(xaxisTime=runif(60),Treatment=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treatment=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treatment=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
caliper <- .02
df <- df %>%
mutate(bins = c(rep(filter(df,Treatment=="Treated")$xaxisTime-caliper,6),
rep(filter(df,Treatment=="Treated")$xaxisTime+caliper,6))) %>%
#There has to be a less clunky way to do this
rowwise() %>%
mutate(matchmeas = min(abs(xaxisTime-filter(df,Treatment=="Treated")$xaxisTime))) %>%
mutate(match = matchmeas < caliper) %>%
group_by(Treatment,match) %>%
mutate(mean_Y = ifelse(match==1,mean(Y),NA)) %>%
ungroup()
#Check how many matches we have before proceeding; regenerate randomized data
#until we have a decent number
table(filter(df,Treatment=="Control")$match)
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(bins=NA,mean_Y=NA,state='1. Start with raw data.'),
#Step 2: Add Y-lines
df %>% mutate(mean_Y=NA,state='2. Look for Controls with similar X values to the Treatments.'),
#Step 3: Drop unmatch obs
df %>% mutate(Y = ifelse(match==1,Y,NA),mean_Y=NA,state="3. Keep Controls only if they're similar enough."),
#Step 4: Take means
df %>% mutate(Y = ifelse(match==1,Y,NA),bins=NA,state="4. Among what's kept, see what the treatment explains."),
#Step 5: Eliminate everything but the means
df %>% mutate(Y = ifelse(match==1,mean_Y,NA),bins=NA,state="5. Ignore everything not explained by treatment."),
#Step 6: Get treatment effect
df %>% mutate(Y = NA,bins=NA,state="6. The treatment effect is the remaining difference."))
p <- ggplot(dffull,aes(y=Y,x=xaxisTime,color=Treatment,size=Treatment))+geom_point()+
geom_vline(aes(xintercept=bins), color='#FF7E15')+
geom_hline(aes(yintercept=mean_Y,color=Treatment))+
geom_segment(aes(x=.5,xend=.5,
y=ifelse(state=="6. The treatment effect is the remaining difference.",
filter(df,Treatment=="Treated")$mean_Y[1],NA),
yend=filter(df,Treatment=="Control",match==TRUE)$mean_Y[1]),size=1.5,color='#FF7E15')+
scale_size_manual(values=c(2,3))+xlab("X")+
guides(fill=guide_legend(title="Group"))+
labs(title = 'The Effect of Treatment on Y while Matching on X (with a caliper) \n{next_state}') +
theme(
plot.title = element_text(size=26, color = "#484848", vjust = -5),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey")
) +
transition_states(state,transition_length=c(12,16,16,16,16,16),state_length=c(50,36,30,30,30,50),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
animate(p, height = 600, width =1000)
df <- data.frame(xaxisTime=runif(60),Treatment=c(rep("Treated",5),rep("Control",55))) %>%
mutate(Y = 3+.4*xaxisTime+1*(Treatment=="Treated")+rnorm(60),
state="1")
#Make sure the treated obs aren't too close together, that makes it confusing
df[df$Treatment=="Treated",]$xaxisTime <- c(1:5/6)+(runif(5)-.5)*.1
caliper <- .02
df <- df %>%
mutate(bins = c(rep(filter(df,Treatment=="Treated")$xaxisTime-caliper,6),
rep(filter(df,Treatment=="Treated")$xaxisTime+caliper,6))) %>%
#There has to be a less clunky way to do this
rowwise() %>%
mutate(matchmeas = min(abs(xaxisTime-filter(df,Treatment=="Treated")$xaxisTime))) %>%
mutate(match = matchmeas < caliper) %>%
group_by(Treatment,match) %>%
mutate(mean_Y = ifelse(match==1,mean(Y),NA)) %>%
ungroup()
#Check how many matches we have before proceeding; regenerate randomized data
#until we have a decent number
table(filter(df,Treatment=="Control")$match)
dffull <- rbind(
#Step 1: Raw data only
df %>% mutate(bins=NA,mean_Y=NA,state='1. Start with raw data.'),
#Step 2: Add Y-lines
df %>% mutate(mean_Y=NA,state='2. Look for Controls with similar X values to the Treatments.'),
#Step 3: Drop unmatch obs
df %>% mutate(Y = ifelse(match==1,Y,NA),mean_Y=NA,state="3. Keep Controls only if they're similar enough."),
#Step 4: Take means
df %>% mutate(Y = ifelse(match==1,Y,NA),bins=NA,state="4. Among what's kept, see what the treatment explains."),
#Step 5: Eliminate everything but the means
df %>% mutate(Y = ifelse(match==1,mean_Y,NA),bins=NA,state="5. Ignore everything not explained by treatment."),
#Step 6: Get treatment effect
df %>% mutate(Y = NA,bins=NA,state="6. The treatment effect is the remaining difference."))
p <- ggplot(dffull,aes(y=Y,x=xaxisTime,color=Treatment,size=Treatment))+geom_point()+
geom_vline(aes(xintercept=bins), color='#FF7E15')+
geom_hline(aes(yintercept=mean_Y,color=Treatment))+
geom_segment(aes(x=.5,xend=.5,
y=ifelse(state=="6. The treatment effect is the remaining difference.",
filter(df,Treatment=="Treated")$mean_Y[1],NA),
yend=filter(df,Treatment=="Control",match==TRUE)$mean_Y[1]),size=1.5,color='#FF7E15')+
scale_size_manual(values=c(2,3))+xlab("X")+
guides(fill=guide_legend(title="Group"))+
labs(title = 'The Effect of Treatment on Y while Matching on X (with a caliper) \n{next_state}') +
theme(
plot.title = element_text(size=26, color = "#484848", vjust = -5),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.2, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey")
) +
transition_states(state,transition_length=c(12,16,16,16,16,16),state_length=c(50,36,30,30,30,50),wrap=FALSE)+
ease_aes('sine-in-out')+
exit_fade()+enter_fade()
# animate(p, height = 600, width =1000)
animate(p, duration = 30, fps = 15, height = 600, width = 1000, renderer = gifski_renderer())
anim_save("/Users/christophihl/Dropbox/7_Lehre/04_Causal Data Science/_slides/_images/matchfig.gif")
install.packages("magick")
install.packages("survival")
quarto_version()
install.packages("magick")
install.packages("pdftools")
install.packages("tikzDevice")
library(tikzDevice)
library(tikzDevice)
# Define the TikZ diagram as a string
tikz_code <- '
\\definecolor{tuhh}{HTML}{00C1D4}
\\begin{tikzpicture}[scale=1]
% Nodes
\\node[circle,draw,minimum size=1cm] (X1) at (0,0) {T};
\\node[circle,draw,fill=gray!50,minimum size=1cm] (X2) at (2,2) {X};
\\node[circle,draw,minimum size=1cm] (X3) at (4,0) {Y};
\\node[rectangle,draw,gray!50,fill=gray!50,minimum width=0.1cm] (X4) at (2,2.7) {};
% Solid edges
\\draw[->, thick] (X2) -- (X1);
\\draw[->, thick] (X2) -- (X3);
\\draw[->, thick] (X1) -- (X3);
% Dashed edge
\\draw[thick, tuhh, dashed] (X1) to[bend left=30] (X4);
\\end{tikzpicture}
'
# Use tikz to create a PDF file with the diagram
tikz(file = "/Users/christophihl/Dropbox/7_Lehre/04_Causal Data Science/_slides/_images/_4/obs_conf.pdf", standAlone = TRUE)
cat(tikz_code)
dev.off()
library(tikzDevice)
# Define the TikZ diagram as a string
tikz_code <- '
\\definecolor{tuhh}{HTML}{00C1D4}
\\begin{tikzpicture}[scale=1]
% Nodes
\\node[circle,draw,minimum size=1cm] (X1) at (0,0) {T};
\\node[circle,draw,fill=gray!50,minimum size=1cm] (X2) at (2,2) {X};
\\node[circle,draw,minimum size=1cm] (X3) at (4,0) {Y};
\\node[rectangle,draw,gray!50,fill=gray!50,minimum width=0.1cm] (X4) at (2,2.7) {};
% Solid edges
\\draw[->, thick] (X2) -- (X1);
\\draw[->, thick] (X2) -- (X3);
\\draw[->, thick] (X1) -- (X3);
% Dashed edge
\\draw[thick, tuhh, dashed] (X1) to[bend left=30] (X4);
\\end{tikzpicture}
'
# Use tikz to create a PDF file with the diagram
tikz(file = "/Users/christophihl/Dropbox/7_Lehre/04_Causal Data Science/_slides/_images/_4/obs_conf.pdf", standAlone = TRUE)
cat(tikz_code)
dev.off()
```{r echo=FALSE, dev='tikz'}
# Set the working directory to where your .tex file is located
setwd("/Users/christophihl/Dropbox/7_Lehre/04_Causal Data Science/_slides/_images/_4")
# Compile LaTeX to PDF
system("pdflatex test.tex")
# Convert PDF to PNG
system("convert -density 300 test.pdf -quality 90 test.png")
?matching::Match
?Matching::Match
install.packages("CBPS")
library(CBPS)
?CBPS
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
cbps=CBPS(D ~ X, ATT = 0)                 # covariate balancing for ATE estimation
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
library(causalweight)                   # load causalweight package
library(COUNT)                          # load COUNT package
attach(lbw)                             # store all variables in own objects
library(COUNT)                          # load COUNT package
data(lbw)                               # load lbw data
install.packages("COUNT")
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
library(causalweight)                   # load causalweight package
library(COUNT)                          # load COUNT package
data(lbw)                               # load lbw data
attach(lbw)                             # store all variables in own objects
D=smoke                                 # define treatment (mother smoking)
Y=bwt                                   # outcome (birthweight in grams)
X=cbind(race==1, age, lwt, ptl, ht, ui, ftv) # covariates
cbps=CBPS(D ~ X, ATT = 0)                 # covariate balancing for ATE estimation
results=lm(Y ~ D, weights=cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
library(causalweight)                   # load causalweight package
library(COUNT)                          # load COUNT package
data(lbw)                               # load lbw data
attach(lbw)                             # store all variables in own objects
D=smoke                                 # define treatment (mother smoking)
Y=bwt                                   # outcome (birthweight in grams)
X=cbind(race==1, age, lwt, ptl, ht, ui, ftv) # covariates
cbps=CBPS(D ~ X, ATT = 1)                 # covariate balancing for ATE estimation
results=lm(Y ~ D, weights=cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
cbps=CBPS(D ~ X, ATT = 2)                 # covariate balancing for ATE estimation
results=lm(Y ~ D, weights=cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
View(lbw)
library(Matching)                       # load Matching package
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
data(lalonde)                           # load lalonde data
attach(lalonde)                         # store all variables in own objects
T=as.factor(treat)                      # define treatment (training)
Y=re78                                  # define outcome
X=cbind(age,educ,nodegr,married,black,hisp,re74,re75,u74,u75) # covariates
cbps=CBPS(T~X, ATT = 0)                 # covariate balancing for ATE estimation
results=lm(Y~T, weights=cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
library(Matching)                       # load Matching package
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
data(lalonde)                           # load lalonde data
attach(lalonde)                         # store all variables in own objects
T=treat.                                # define treatment (training)
T=treat                                 # define treatment (training)
Y=re78                                  # define outcome
X=cbind(age,educ,nodegr,married,black,hisp,re74,re75,u74,u75) # covariates
cbps=CBPS(T~X, ATT = 0)                 # covariate balancing for ATE estimation
results=lm(Y~T, weights=cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
library(Matching)                       # load Matching package
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
data(lalonde)                           # load lalonde data
attach(lalonde)                         # store all variables in own objects
T=treat                                 # define treatment (training)
Y=re78                                  # define outcome
X=cbind(age,educ,nodegr,married,black,hisp,re74,re75,u74,u75) # covariates
cbps=CBPS(T~X, ATT = 0)                 # covariate balancing for ATE estimation
results=lm(Y~T, weights=cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
library(Matching)                       # load Matching package
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
data(lalonde)                           # load lalonde data
attach(lalonde)                         # store all variables in own objects
Tr = treat                              # define treatment (training)
Y = re78                                # define outcome
X = cbind(age,educ,nodegr,married,black,hisp,re74,re75,u74,u75) # covariates
cbps = CBPS(Tr ~ X, ATT = 0)                 # covariate balancing for ATE estimation
results = lm(Y ~ Tr, weights = cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
library(Matching)                       # load Matching package
library(CBPS)                           # load CBPS package
library(lmtest)                         # load lmtest package
library(sandwich)                       # load sandwich package
data(lalonde)                           # load lalonde data
attach(lalonde)                         # store all variables in own objects
Tr = treat                              # define treatment (training)
Y = re78                                # define outcome
X = cbind(age,educ,nodegr,married,black,hisp,re74,re75,u74,u75) # covariates
cbps = CBPS(Tr ~ X, ATT = 0)                 # covariate balancing for ATE estimation
results = lm(Y ~ Tr, weights = cbps$weights)   # weighted regression
coeftest(results, vcov = vcovHC)        # show results
